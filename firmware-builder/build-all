#!/usr/bin/perl

use warnings;
use strict;
use IPC::Run;
use Cwd qw/abs_path cwd/;

my %git_tags;
my @build_log;
my $ROOT = get_cwd();
my $OUTPUT_DIR;

my %args = (

    '--tag' => undef,

    @ARGV
);

if ( !$args{'--tag'} ) {
    die "You need to specifiy a tag or branch name that exists on all four repos in order to build.\n";
}

my %repos = (
    attiny_bootloader  => {url=> 'git://github.com/keyboardio/attiny_i2c_bootloader', dir => 'attiny_bootloader' },
    attiny_firmware    => {url=>'git://github.com/keyboardio/avr_keyscanner', dir => 'attiny_firmware',},

    arduino_boards     => {url=>'git://github.com/keyboardio/Arduino-Boards', dir => 'arduino_boards'},
    "atmega_firmware" => { url => 'git://github.com/keyboardio/Model01-Firmware', dir => 'Model01-Firmware'},
);

my %files = (

    build_details                   => 'BUILD_DETAILS.txt',
    attiny_bootloader               => "attiny88_bootloader.hex",
    attiny_firmware_with_bootloader => "attiny88_firmware_with_bootloader.hex",
    attiny_firmware                 => "attiny88_firmware.hex",
    attiny_flasher_sketch_dir       => "attiny_flasher",
    attiny_flasher_sketch           => "attiny_flasher/attiny_flasher.ino",
    atmega_bootloader               => "atmega32u4_bootloader.hex",
    atmega_firmware                 => "atmega32u4_firmware.hex",
    atmega_firmware_with_bootloader => "atmega32u4_firmware_with_bootloader.hex"

);


eval {

    check_deps();

    mkdir("repos");

    $OUTPUT_DIR = make_output_dir();
    set_cwd($ROOT);
    get_code();
    set_output_filenames();
    build_attiny_bootloader();
    build_attiny_firmware();
    build_atmega_bootloader();
    build_atmega_firmware();
    describe_build();

};

if ( my $err = $@ ) {
    print STDERR "Build failure. Here's the log:\n";
    print STDERR join( "\n", @build_log );
    exit -1;
}
else {
    print "Build succeeded.\n";
    print "Output directory: " . $OUTPUT_DIR . "\n";
    print "Build log: " . $OUTPUT_DIR . $files{'build_details'} . "\n";
}

sub get_code {

    # Check out repos as of tag $TAG:
    for my $repo_name ( keys %repos ) {
        set_cwd($ROOT);
        my $repo_path = "repos/" . $repos{$repo_name}->{dir};
        if ( !-d $repo_path . "/.git" ) {
            git( 'clone', $repos{$repo_name}->{url}, $repo_path );
            set_cwd($repo_path);
        }
        else {
            set_cwd($repo_path);
            git('pull');
        }
        git( qw/ checkout/, $args{'--tag'} );
        git(qw/ submodule update --init --recursive/);
        git(qw/clean -xdf/);
        my $tag = git(qw"describe --abbrev=16 --dirty --always");
        chomp($tag);
        $git_tags{$repo_name} = $tag;
    }
}


sub build_attiny_bootloader {
    set_cwd( repo_dir('attiny_bootloader'). "/TWI_Slave" );

    make(qw"all");

    copy_built_file( "twi_slave.hex", $files{'attiny_bootloader'} );
}

sub build_attiny_firmware {
    set_cwd( repo_dir('attiny_firmware'));
    copy( $OUTPUT_DIR . $files{'attiny_bootloader'}, "etc/bootloader.hex" );

    make("all");
    make("flashing-tool");

    mkdir( $OUTPUT_DIR . $files{'attiny_flasher_sketch_dir'} );
    copy_built_file( "out/flasher/flasher.ino", $files{'attiny_flasher_sketch'} );
    copy_built_file( "out/attiny88_factory.hex",    $files{'attiny_firmware_with_bootloader'} );
    copy_built_file( "out/attiny88_keyscanner.hex", $files{'attiny_firmware'} );

}

sub build_atmega_bootloader {
    set_cwd( repo_dir('arduino_boards'). "/bootloaders/caterina" );

    make("all");

    copy_built_file( "Caterina.hex" => $files{'atmega_bootloader'} );

}

sub build_atmega_firmware {
    set_cwd( repo_dir("atmega_firmware" ));

    make("build");
    make( "hex-with-bootloader", "BOOTLOADER_PATH=" . $OUTPUT_DIR . $files{'atmega_bootloader'} );

    copy_built_file( "output/Model01-Firmware/Model01-Firmware-latest.hex" => $files{'atmega_firmware'} );
    copy_built_file( "output/Model01-Firmware/Model01-Firmware-latest-with-bootloader.hex" => $files{'atmega_firmware_with_bootloader'} );

}

sub copy {
    my $from = shift;
    my $to   = shift;
    my ( $exitcode, $out, $err ) = run_command( "cp", $from, $to );
}

sub copy_built_file {
    my $from = shift;
    my $to   = shift;
    copy( $from => $OUTPUT_DIR . $to );
}

sub git {
    my @commands = (@_);
    my ( $exitcode, $out, $err ) = run_command( 'git', @commands );
    return $out;
}

sub make {
    my @commands = (@_);
    my ( $exitcode, $out, $err ) = run_command( 'make', @commands );
    if ($exitcode) {
        print "Ran command: " . join( " ", 'make', @commands );
        print "$err\n";
    }
    elsif ($err) {
        print "No failure, but still error output:\n\n$err\n";
    }
    else {

    }
}

sub run_command {
    my @cmd = (@_);
    my ( $in, $out, $err, $exitcode );
    print "# " . join( " ", @cmd ) . "\n";
    eval {
        IPC::Run::run( \@cmd, \$in, \$out, \$err );

    };
    if ($@) {

        # Could not run the program
        $exitcode = undef;
        die "Could not run command '" . join( " ", @cmd ) . "'\n";
    }
    else {
        $exitcode = $? >> 8;
    }

    print $out. "\n" if ( $out && $args{'--debug'} );
    print $err. "\n" if ( $err && $args{'--debug'} );

    push @build_log, "# " . join( " ", @cmd );
    if ( $exitcode != 0 ) {
        push @build_log, "Non-zero exit code: " . $exitcode;
    }
    if ($out) {
        push @build_log, $out;
    }
    if ($err) {
        push @build_log, "STDERR:";
        push @build_log, $err;
    }

    if ( $exitcode != 0 ) {
        die "Exit code $exitcode";
    }
    return ( $exitcode, $out, $err );
}

sub set_cwd {
    my $dir = shift;
    print "# cd $dir\n";
    push @build_log, "# cd $dir";
    chdir($dir);
}

sub get_cwd {
    my $dir = abs_path( cwd() ) . "/";
    return $dir;
}

sub check_deps {
    eval { run_command( 'avr-gcc', '-v' ) };
    if ( my $err = $@ ) {
        die "avr-gcc does not appear to be installed: $err\n";
    }

}

sub make_output_dir {

    mkdir("output");
    set_cwd("output");
    my $datestring = `date -Isec -u`;
    chomp($datestring);
    $datestring =~ s/\+00:00$//;
    $datestring =~ s /://g;
    mkdir($datestring);
    if ( -l 'latest' ) {
        run_command( 'rm', 'latest' );
    }
    symlink $datestring, 'latest';
    chdir($datestring);

    return get_cwd();
}

sub set_output_filenames {
    if ( $args{'--hashes-in-file-names'} ) {
        $files{'attiny_bootloader'}               = "attiny88_bootloader-" . $git_tags{'attiny_bootloader'} . ".hex";
        $files{'attiny_firmware_with_bootloader'} = "attiny88_firmware_with_bootloader-" . $git_tags{'attiny_firmware'} . ".hex";
        $files{'attiny_firmware'}                 = "attiny88_firmware-" . $git_tags{'attiny_firmware'} . ".hex";
        $files{'attiny_flasher_sketch_dir'}       = "attiny_flasher-" . $git_tags{'attiny_firmware'};
        $files{'attiny_flasher_sketch'}           = $files{'attiny_flasher_sketch_dir'} . "/attiny_flasher-" . $git_tags{'attiny_firmware'} . ".ino";
        $files{'atmega_bootloader'}               = "atmega32u4_bootloader-" . $git_tags{'arduino_boards'} . ".hex";
        $files{'atmega_firmware'}                 = "atmega32u4_firmware-" . $git_tags{'Model01-Firmware'} . ".hex";
        $files{'atmega_firmware_with_bootloader'} = "atmega32u4_firmware_with_bootloader-" . $git_tags{'Model01-Firmware'} . ".hex";
    }
}

sub repo_dir {
	my $repo = shift;
	return $ROOT.'repos/'.$repos{$repo}->{dir};
}


sub describe_build {
    set_cwd($OUTPUT_DIR);
    open( my $out, ">", $files{'build_details'} );

    print $out "Firmware build completed at " . scalar gmtime() . "\n";
    print $out "\n\n";

    print $out "=" x 60 . "\n";
    for my $key ( keys %git_tags ) {
        print $out "Repository:  " . $key . "\n" . "Repo URL:    " . $repos{$key} . "\n" . "Description: " . $git_tags{$key} . "\n\n";
    }

    print $out "=" x 60 . "\n";
    print $out "Build tool invocation:\n";
    print $out join( " ", $0, @ARGV );

    print $out "\n\n\n";
    print $out "=" x 60 . "\n";
    print $out "Build Log:\n";
    print $out join( "\n", @build_log );

    print $out "\n\n\n\n";
    print $out "=" x 60 . "\n";

    for my $cmd ( 'arduino-builder -version', 'avr-gcc -v', 'git --version', 'make -v', 'uname -a', 'hostname' ) {
        my ( $exit, $stdout, $stderr ) = run_command( split( /\s+/, $cmd ) );
        print $out "\n\n";
        print $out "'$cmd':\n";

        print $out $stdout || $stderr;
    }

    close $out;
    set_cwd($ROOT);
}
