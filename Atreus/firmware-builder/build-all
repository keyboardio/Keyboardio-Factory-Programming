#!/usr/bin/perl

# export PATH=/Applications/Arduino.app/Contents/Java/hardware/tools/avr/bin:$PATH

use warnings;
use strict;
use IPC::Run;
use Getopt::Long;
use Cwd qw/abs_path cwd/;

my %git_tags;
my @build_log;
my $ROOT                         = get_cwd();
my $FLASHER_FIRMWARE_DIR         = $ROOT . "../linux-flashing-station/firmware";
my $WINDOWS_FLASHER_FIRMWARE_DIR = $ROOT . "../windows-flashing-tools/firmware";
my $OUTPUT_DIR;
my $progress = 0;

my %args;




GetOptions( \%args, 'tag=s', 'bundle-ref=s', 'hashes-in-file-names', 'install',
    'debug', 'help' );

if ( $args{'help'} ) {
    die "Jesse needs to doc some help";
}

if ( !$args{'tag'} ) {
    die
"You need to specifiy a tag or branch name that exists on all four repos in order to build.\n";
}

my %repos = (
    'bundle' => {
        url => 'git://github.com/keyboardio/Kaleidoscope-Bundle-Keyboardio',
        dir => 'bundle'
    },
);

my %files = (
    build_details                   => 'BUILD_DETAILS.txt',
    atmega_bootloader               => "atmega32u4_bootloader.hex",
    atmega_firmware                 => "atmega32u4_firmware.hex",
    atmega_firmware_with_bootloader => "atmega32u4_firmware_with_bootloader.hex"

);



eval {

    check_deps();

    mkdir("repos");
    get_code();

    build_fake_homedir();
    $ENV{'HOME'} = $ROOT."/homedir";

    $OUTPUT_DIR = make_output_dir();
    set_output_filenames();

    my $bootloader_source = repo_dir('bundle') . "/avr/bootloaders/Atreus2" ;
    my $firmware_sketch_source = repo_dir('bundle') . "/avr/libraries/Kaleidoscope/examples/Devices/Keyboardio/Atreus" ;

    build_atmega_bootloader($bootloader_source);
    build_atmega_firmware($firmware_sketch_source);
    describe_build();

    if ( $args{install} ) {
        install_to_flasher();
    }

};

if ( my $err = $@ ) {
    print STDERR "\n\nBuild failure.\n";
    print STDERR "The problem was: $err\n";
    print STDERR "Here's the log:\n";
    print STDERR join( "\n", @build_log );
    exit -1;
}
else {
    print "\nBuild succeeded.\n";
    print "Output directory: " . $OUTPUT_DIR . "\n";
    print "Build log: " . $OUTPUT_DIR . $files{'build_details'} . "\n";
}

sub get_code {

    # Check out repos as of tag $TAG:
    for my $repo_name ( keys %repos ) {
        set_cwd($ROOT);
        my $repo_path = "repos/" . $repos{$repo_name}->{dir};
        if ( !-d $repo_path . "/.git" ) {
            git( 'clone', $repos{$repo_name}->{url}, $repo_path );
            set_cwd($repo_path);
        }
        else {
            set_cwd($repo_path);
            git(qw'fetch --all');
        }

        my $ref = $args{'tag'};

        if ( my $repo_refname = $args{ $repo_name . '-ref' } ) {
            $ref = $repo_refname;
        }
        git( qw/checkout/, $ref );
        git(qw/submodule update --init --recursive/);
        git(qw/clean -xdf/);
        describe_repo_from_cwd($repo_name);
    }
}

sub build_fake_homedir {
        set_cwd($ROOT);
	warn "Making the fake homedir structure inside $ROOT";
	mkdir("homedir");
	mkdir("homedir/Documents");
	mkdir("homedir/Documents/Arduino");
	mkdir("homedir/Documents/Arduino/hardware");
	symlink("homedir/Documents/Arduino", "homedir/Arduino");
	symlink (repo_dir('bundle'), "homedir/Documents/Arduino/hardware/keyboardio");

}

sub describe_repo_from_cwd {
    my $repo_name = shift;
    my $tag       = git(qw"describe --abbrev=6 --dirty --always");
    chomp($tag);
    $git_tags{$repo_name} = $tag;
}

sub build_atmega_bootloader {
	my $bootloader_dir = shift;
    set_cwd( $bootloader_dir);

    make("all");

    copy_built_file( "Caterina.hex" => $files{'atmega_bootloader'} );
    make("clean");
}

sub build_atmega_firmware {
    my $firmware_dir = shift;

    set_cwd( $firmware_dir);
    describe_repo_from_cwd('atmega-firmware');

    my $sketch_output_dir = 'output/';

    my $version_information =
        '"sketch:' . $git_tags{'atmega-firmware'} . 
	";lib:" . $git_tags{'bundle'} . '"';


   my @build_env = (
        "OUTPUT_PATH=" . $sketch_output_dir,
        "BOOTLOADER_PATH=" . $OUTPUT_DIR . $files{'atmega_bootloader'},
        "LOCAL_CFLAGS='-DBUILD_INFORMATION=" . $version_information . "'"

	);

    make( "build",  @build_env);
    make( "hex-with-bootloader", @build_env);

    copy_built_file( $sketch_output_dir . "Atreus-latest.hex" => $files{'atmega_firmware'} );
    copy_built_file( $sketch_output_dir . "Atreus-latest-with-bootloader.hex" => $files{'atmega_firmware_with_bootloader'} );

}

sub copy {
    my $from = shift;
    my $to   = shift;
    my ( $exitcode, $out, $err ) = run_command( "cp", $from, $to );
}

sub copy_built_file {
    my $from = shift;
    my $to   = shift;
    copy( $from => $OUTPUT_DIR . $to );
}

sub git {
    my @commands = (@_);
    my ( $exitcode, $out, $err ) = run_command( 'git', @commands );
    return $out;
}

sub make {
    my @commands = (@_);
    my ( $exitcode, $out, $err ) = run_command( 'make', @commands );
    if ($exitcode) {
        print "Ran command: " . join( " ", 'make', @commands );
        print "$err\n";
    }
    elsif ($err) {
        print "No failure, but still error output:\n\n$err\n";
    }
    else {

    }
}

sub run_command {
    my @cmd = (@_);
    my ( $in, $out, $err, $exitcode );
    progress();
    print "# " . join( " ", @cmd ) . "\n" if ( $args{'debug'} );
    eval {
        IPC::Run::run( \@cmd, \$in, \$out, \$err );

    };
    if ($@) {

        # Could not run the program
        $exitcode = undef;
        die "Could not run command '" . join( " ", @cmd ) . "'\n";
    }
    else {
        $exitcode = $? >> 8;
    }

    print $out. "\n" if ( $out && $args{'debug'} );
    print $err. "\n" if ( $err && $args{'debug'} );

    push @build_log, "# " . join( " ", @cmd );
    if ( $exitcode != 0 ) {
        push @build_log, "Non-zero exit code: " . $exitcode;
    }
    if ($out) {
        push @build_log, $out;
    }
    if ($err) {
        push @build_log, "STDERR:";
        push @build_log, $err;
    }

    if ( $exitcode != 0 ) {
        die "Exit code $exitcode";
    }
    return ( $exitcode, $out, $err );
}

sub set_cwd {
    my $dir = shift;
    progress();
    print "# cd $dir\n" if ( $args{debug} );
    push @build_log, "# cd $dir";
    chdir($dir);
}

sub get_cwd {
    my $dir = abs_path( cwd() ) . "/";
    return $dir;
}

sub check_deps {
    eval { run_command( 'avr-gcc', '-v' ) };
    if ( my $err = $@ ) {
        die "avr-gcc does not appear to be installed: $err\n";
    }

}

sub make_output_dir {

    mkdir("output");
    set_cwd("output");
    my $datestring = `date -u "+%Y-%m-%dT%H:%M:%S"`;
    chomp($datestring);
    mkdir($datestring);
    if ( -l 'latest' ) {
        run_command( 'rm', 'latest' );
    }
    symlink $datestring, 'latest';
    chdir($datestring);

    return get_cwd();
}

sub set_output_filenames {
    if ( $args{'hashes-in-file-names'} ) {
        $files{'atmega_bootloader'} = "atmega32u4_bootloader-" . $git_tags{'bundle'} . ".hex";
        $files{'atmega_firmware'} = "atmega32u4_firmware-" . $git_tags{'atmega-firmware'} . ".hex";
        $files{'atmega_firmware_with_bootloader'} = "atmega32u4_firmware_with_bootloader-" . $git_tags{'atmega-firmware'} . ".hex";
    }
}

sub repo_dir {
    my $repo = shift;
    return $ROOT . 'repos/' . $repos{$repo}->{dir};
}


sub describe_build_header {
    my $title = shift;

    my $result = "\n\n\n";
    $result .= "=" x 60 . "\n";
    $result .= $title . ":\n";
    return $result;
}
sub describe_build {
    set_cwd($OUTPUT_DIR);
    open( my $out, ">", $files{'build_details'} );

    print $out "Firmware build completed at " . scalar gmtime() . "\n";
    print $out "\n\n";

    print $out "=" x 60 . "\n";
    for my $key ( keys %git_tags ) {
        print $out "Repository:  "
          . $key . "\n"
          . "Repo URL:    "
          . ( $repos{$key}->{url} || '' ) . "\n"
          . "Description: "
          . $git_tags{$key} . "\n\n";
    }

    print $out describe_build_header("Build tool invocation");
    print $out join( " ", $0, @ARGV );

    print $out describe_build_header("Build Log");
    print $out join( "\n", @build_log );

    print $out describe_build_header("Environment");
    for my $cmd (
        'arduino-builder -version',
        'avr-gcc -v', 'git --version',
        'make -v', 'uname -a', 'hostname'
      )
    {
        my ( $exit, $stdout, $stderr ) = run_command( split( /\s+/, $cmd ) );
        print $out "\n\n";
        print $out "'$cmd':\n";

        print $out $stdout || $stderr;
    }

    close $out;
    set_cwd($ROOT);
}

sub install_to_flasher {
    copy(   $OUTPUT_DIR . $files{'atmega_firmware_with_bootloader'} => $FLASHER_FIRMWARE_DIR . "/atmega.hex" );
    copy(   $OUTPUT_DIR . $files{'atmega_firmware_with_bootloader'} => $WINDOWS_FLASHER_FIRMWARE_DIR . "/atmega.hex" );
}

sub progress {
    $progress++;
    print "." if ( !$args{debug} );
}
